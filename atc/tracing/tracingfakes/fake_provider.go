// Code generated by counterfeiter. DO NOT EDIT.
package tracingfakes

import (
	"sync"

	"go.opentelemetry.io/otel/api/trace"
)

type FakeProvider struct {
	GetTracerStub        func(string) trace.Tracer
	getTracerMutex       sync.RWMutex
	getTracerArgsForCall []struct {
		arg1 string
	}
	getTracerReturns struct {
		result1 trace.Tracer
	}
	getTracerReturnsOnCall map[int]struct {
		result1 trace.Tracer
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProvider) GetTracer(arg1 string) trace.Tracer {
	fake.getTracerMutex.Lock()
	ret, specificReturn := fake.getTracerReturnsOnCall[len(fake.getTracerArgsForCall)]
	fake.getTracerArgsForCall = append(fake.getTracerArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetTracer", []interface{}{arg1})
	fake.getTracerMutex.Unlock()
	if fake.GetTracerStub != nil {
		return fake.GetTracerStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getTracerReturns
	return fakeReturns.result1
}

func (fake *FakeProvider) GetTracerCallCount() int {
	fake.getTracerMutex.RLock()
	defer fake.getTracerMutex.RUnlock()
	return len(fake.getTracerArgsForCall)
}

func (fake *FakeProvider) GetTracerCalls(stub func(string) trace.Tracer) {
	fake.getTracerMutex.Lock()
	defer fake.getTracerMutex.Unlock()
	fake.GetTracerStub = stub
}

func (fake *FakeProvider) GetTracerArgsForCall(i int) string {
	fake.getTracerMutex.RLock()
	defer fake.getTracerMutex.RUnlock()
	argsForCall := fake.getTracerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeProvider) GetTracerReturns(result1 trace.Tracer) {
	fake.getTracerMutex.Lock()
	defer fake.getTracerMutex.Unlock()
	fake.GetTracerStub = nil
	fake.getTracerReturns = struct {
		result1 trace.Tracer
	}{result1}
}

func (fake *FakeProvider) GetTracerReturnsOnCall(i int, result1 trace.Tracer) {
	fake.getTracerMutex.Lock()
	defer fake.getTracerMutex.Unlock()
	fake.GetTracerStub = nil
	if fake.getTracerReturnsOnCall == nil {
		fake.getTracerReturnsOnCall = make(map[int]struct {
			result1 trace.Tracer
		})
	}
	fake.getTracerReturnsOnCall[i] = struct {
		result1 trace.Tracer
	}{result1}
}

func (fake *FakeProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getTracerMutex.RLock()
	defer fake.getTracerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ trace.Provider = new(FakeProvider)
